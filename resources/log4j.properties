# info 日志级别 ALL<DEBUG<INFO<WARN<ERROR<FATAL<OFF，不区分大小写
# DailyRollingFileAppender每天产生一个日志文件
# stdout输出到控制台
log4j.rootLogger=info, ServerDailyRollingFile, stdout
log4j.appender.ServerDailyRollingFile=org.apache.log4j.DailyRollingFileAppender 
# 按天分割日志文件，默认false，所有的都卸载一个文件中
log4j.appender.ServerDailyRollingFile.splitByDateDir=true
log4j.appender.ServerDailyRollingFile.DatePattern='.'yyyy-MM-dd
#log4j.appender.ServerDailyRollingFile.File=default.log 
log4j.appender.ServerDailyRollingFile.File=D://logs/default.log
log4j.appender.ServerDailyRollingFile.layout=org.apache.log4j.PatternLayout
# layout.ConversionPattern=日志输出格式
# 例如，%d - %m%n或%d{yyyy-MM-dd HH:mm:ss} %p [%c] %m%n
# %c 输出日志信息所属的类的全名
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-M-dd HH:mm:ss }，输出类似：2002-10-18- 22：10：28
# %f 输出日志信息所属的类的类名
# %l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行 （com.mtime.log4j.Log4jTest.errorTest(Log4jTest.java:33)）
# %L 只输出事件发生的位置（行号）33
# %m 输出代码中指定的信息，如log(message)中的message
# %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推
# %r 输出自应用启动到输出该日志信息所耗费的毫秒数
# %t 输出产生该日志事件的线程名
log4j.appender.ServerDailyRollingFile.layout.ConversionPattern=%d{yyy-M-dd HH:mm:ss} %p (%c:%L) - %m%n
# 日志追加写入
log4j.appender.ServerDailyRollingFile.Append=true

log4j.appender.stdout=org.apache.log4j.ConsoleAppender 
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout 
#log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %p [%c] %m%n
log4j.appender.stdout.layout.ConversionPattern=%d{yyy-M-dd HH:mm:ss} %p (%c:%L) - %m%n